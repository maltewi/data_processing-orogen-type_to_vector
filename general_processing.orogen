name "general_processing"

version "0.1"

using_library 'general_processing'

import_types_from 'base'
import_types_from 'GeneralProcessingTypes.hpp'

task_context "BaseTask" do
    doc "This task provides a infrastructure for processing data types as a "+
    "vector of their values. Input ports can pe added, that automatically are "+
    "converted into a vector of doubles. Vectors of multiple ports can be aranged "+
    "into one big vector. Be aware that in case of opaque types not the type itself "+
    "is converted by the intermediate type."

    needs_configuration

    dynamic_input_port(/\w+/, nil).
        needs_reliable_connection. # TODO necessary?
        task_trigger

    dynamic_output_port(/\w+/, nil)
    
    operation('loadTypekit').
        returns('bool').
        argument('name', 'std/string', 'the name of the typekit that should be loaded')

    operation("addComponentToVector").
       returns("bool").
       argument("component", "/std/string", "compoment to receive the ports from").
       argument("slice", "/std/string", "get a part of the data, is applied to all ports").
       argument("to_vector", "/int").
       doc("add all ports of a component")
   
    operation("addPortToVector").
       returns("bool").
       argument("component", "/std/string", "compoment to receive the data from").
       argument("port", "/std/string", "component's port to receive the data from").
       argument("slice", "/std/string", "get only a part of the data").
       argument("to_vector","/int").
       doc("add a port of a component")

    operation("createInputPort").
        returns("bool").
        argument("port_name", "/std/string", "the name of the port to be created").
        argument("type_name", "/std/string", "the name of the type the port should handle").
        argument("slice", "/std/string", "describes the part of the type to be converted").
        argument("to_vector", "/int", "index of the vector it should be added to").
        doc("creates an input port at runtime and add it to a vector conversion")

    property("debug_conversion","/bool").
        doc "create a debug port for a vector and sends the conversion results to it"

    property("create_places","/bool").
        doc "creates place information during conversion"
    
    property("time_fields","/std/string","time").
        doc "space seperated list of valid timestamp fields"

    stream_aligner do
        max_latency 0.1
    end

end

task_context "BufferedDataTask" do
    subclasses "BaseTask"

    doc "In addition to the BaseTask the data are buffered. The size of the incoming "+
        "data must not change."
    
    operation("setBufferSizeFromTime").
        returns("int").
        argument("delta_time", "/base/Time", "time distance between two consecutive samples").
        argument("window_start", "/base/Time", "the time the window starts from now back in time").
        argument("window_length", "/base/Time", "the lenght of the window").
        doc("computes the needed buffer length and sets the property buffer_size")

    property("buffer_size","int").
        doc "how many vectors can be stored in the buffer"

    property("buffer_time","bool").
        doc "buffers the time stamps of the vector elements as well"
end

typekit do
    export_types "/general_processing/ConvertedVector"
end

deployment "general_processing_test" do
    do_not_install
    task('TestBaseTask','general_processing::BaseTask').
        periodic(0.1)
    add_default_logger
end
